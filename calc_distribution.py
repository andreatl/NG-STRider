''' parses summary file generated by 'str_finder.py to generate allele counts and their frequency distributions. Assumes diploidy.

July 2010, Andrea Lai, Infinity Pharmaceuticals'''

from decimal import *
from operator import itemgetter
import csv, sys, optparse

def get_file():
	i = raw_input('')
	try:
		list = parse_file(i)
	except IOError:
		print 'File not found. Try again'
		list = get_file()
	return list
	
def parse_file(file, flag = 0):
	"""Parses a tab-delimited file into a list. If flag is 1, parses file to dictionary"""
	sample = open(file, "rb")
	readSample = csv.reader(sample, dialect="excel-tab")
	sampleList = []
	sampleDict = {}
	if flag == 0:
		for row in readSample:
			sampleList.append(row)
		return sampleList
	if flag == 1:
		for row in readSample:
			sampleDict[row[0]] = row[1]
		return sampleDict
	sample.close()
	
def create_csv(file, data):
	"""produce a tab delimited file from a list"""
	sample = open(file, 'w')
	writeSample = csv.writer(sample, lineterminator="\n", delimiter="\t")
	writeSample.writerows(data)
	sample.close()

def main():	
	p = optparse.OptionParser()
	p.add_option('--output', '-o', default="out", help="designate output file name")
	options, args = p.parse_args()
	
	try:
		summary = parse_file(args[0])
	except IndexError:
		print 'No input list given. Input list file?'
		summary = get_file()
	except IOError:
		print 'Input file not found'
		summary = get_file()
	
	# delete header
	del summary[0]
	
	gen_count = {}
	gen_list = []

	# histogram of the genotypes
	for item in summary:
		tuple = (item[1], item[2])
		if tuple in gen_count:
			gen_count[tuple] += 1
		else:
			gen_count[tuple] = 1

	for tuple in gen_count.keys():
		probe, genotype = tuple
		if genotype != '':
			gen_list.append([probe, '('+genotype+')', gen_count[tuple]])

	# sorting strings, not integers. The sort order has not yet been fixed.
	gen_counts = sorted(gen_list, key=itemgetter(0,1))
	#create_csv(options.output+'_genotypes.txt', gen_counts)

	allele_freq = {}
	total_counts = {}
	allele_counts = []

	for item in gen_list:
		probe = item[0]
		genotype = item[1]
		count = item[2]
		
		alleles = genotype.replace('(','').replace(')', '').split(', ')
		if len(alleles) == 1:
			count = count*2
		
		if probe in total_counts:
			total_counts[probe] += count
		else:
			total_counts[probe] = count
			
		for item in alleles:
			if (probe, item) in allele_freq:
				allele_freq[(probe, item)] += count
			else:
				allele_freq[(probe, item)] = count

	getcontext().prec = 3			
	for item in allele_freq:
		k, v = item
		v = Decimal(v)
		count = Decimal(allele_freq[item])
		freq = count/Decimal(total_counts[k]*2)
		#print count, total_counts[k], freq
		
		allele_counts.append([k, v, count, str(freq)])

	counts = sorted(allele_counts, key=itemgetter(0,1))
	create_csv(options.output+'_freqs.txt', counts)

if __name__ == '__main__':
	main()